Question :-
--------

Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S.
In case of multiple subarrays, return the subarray which comes first on moving from left to right.

======================================================================================================================================

class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
    
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
        // Your code here
        
        ArrayList<Integer> ary = new ArrayList<>();
        for(int i=0;i<n;i++){
            int sum = 0;
            for(int j=i;j<n;j++){
                
                sum += arr[j];
                
                if(sum == s){
                    ary.add(i+1);
                    ary.add(j+1);
                    return ary;
                }
                
                if(sum > s || j == n) break;              
            }     
        }
        if(ary.isEmpty()) ary.add(-1);
        return ary;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------

Example 1:

Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.

Example 2:

Input:
N = 10, S = 15
A[] = {1,2,3,4,5,6,7,8,9,10}
Output: 1 5
Explanation: The sum of elements 
from 1st position to 5th position
is 15.
